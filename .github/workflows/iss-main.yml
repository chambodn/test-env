name: Process IssueComment events
on:
  issue_comment:

permissions:
  id-token: write
  contents: read
  pull-requests: write

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get branch name
        id: branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRNUM: ${{ github.event.pull_request.number }}
          GITHUB_CONTEXT: ${{ toJSON(github) }}         
        run: |
          echo "$GITHUB_CONTEXT"
          echo "::set-output name=name::$(gh pr view $PRNUM --json headRefName -q .headRefName)"
      - name: print
        run: echo "${{ steps.branch.outputs.name }}"
  # dev:
  #   name: deploy-in-dev
  #   environment: dev
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Test.
  #       run: |
  #         echo "Running on pr: ${{ github.ref }}"

  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Check env
  #       run: echo "The current environment is ${{ secrets.ENV_NAME }}"

  #     # Checks to see if any files in the PR match one of the listed file types.
  #     # We can use this filter to decide whether or not to run linters or tests.
  #     # You can check if a file with a listed file type is in the PR by doing:
  #     # if: ${{ steps.filter.outputs.md == 'true' }}
  #     # This will return true if there's a markdown file that was changed
  #     # in the PR.
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           sandbox:
  #             - 'live/sandbox/**'
  #           dev:
  #             - 'live/dev/**'
  #           envcommon:
  #             - '_envcommon/**'

  #     - uses: actions/github-script@v3
  #       with:
  #         github-token: ${{secrets.GITHUB_TOKEN}}
  #         script: |
  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: '‚ùåüö´ Thanks for reporting!'
  #           })