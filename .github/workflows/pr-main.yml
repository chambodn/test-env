name: Process PullRequest events
on: 
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
    paths-ignore:
        - 'docs/**'
        - '*.md'
    branches:
    # restrict actions on pull requests to only 
    # run when created against the main branch
      - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  deploy-in-dev:
    if: |
      !github.event.pull_request.draft &&
      startsWith(github.head_ref, 'dev/')
    uses: ./.github/workflows/deploy.yml
    with:
      execution_environment: dev
    secrets: inherit

  deploy-in-sandbox:
    if: |
      !github.event.pull_request.draft &&
      startsWith(github.head_ref, 'sandbox/')
    uses: ./.github/workflows/deploy.yml
    with:
      execution_environment: sandbox
    secrets: inherit

  deploy-in-pre:
    if: |
      !github.event.pull_request.draft &&
      startsWith(github.head_ref, 'pre/')
    uses: ./.github/workflows/deploy.yml
    with:
      execution_environment: pre
    secrets: inherit
  
  deploy-in-prod:
    if: |
      !github.event.pull_request.draft &&
      startsWith(github.head_ref, 'prod/')
    uses: ./.github/workflows/deploy.yml
    with:
      execution_environment: prod
    secrets: inherit

  # dev:
  #   name: deploy-in-dev
  #   environment: dev
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Test.
  #       run: |
  #         echo "Running on pr: ${{ github.ref }}"

  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Check env
  #       run: echo "The current environment is ${{ secrets.ENV_NAME }}"

  #     # Checks to see if any files in the PR match one of the listed file types.
  #     # We can use this filter to decide whether or not to run linters or tests.
  #     # You can check if a file with a listed file type is in the PR by doing:
  #     # if: ${{ steps.filter.outputs.md == 'true' }}
  #     # This will return true if there's a markdown file that was changed
  #     # in the PR.
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           sandbox:
  #             - 'live/sandbox/**'
  #           dev:
  #             - 'live/dev/**'
  #           envcommon:
  #             - '_envcommon/**'

  #     - uses: actions/github-script@v3
  #       with:
  #         github-token: ${{secrets.GITHUB_TOKEN}}
  #         script: |
  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: '‚ùåüö´ Thanks for reporting!'
  #           })